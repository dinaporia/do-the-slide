{"version":3,"sources":["components/MintBeanLogo.js","components/Landing.js","components/Header.js","components/Game/Stats.js","assets/sounds/nopeSound.wav","assets/sounds/slideSound2.mp3","components/Game/GameBoard.js","components/Game/GameImage.js","components/Game/GameOver.js","components/Game/GamePiece.js","components/Slide.js","App.js","index.js"],"names":["Mintbean","className","xmlns","fillRule","strokeLinejoin","strokeMiterlimit","clipRule","viewBox","fill","d","id","x1","x2","y1","y2","gradientTransform","gradientUnits","offset","stopColor","Landing","src","alt","href","target","rel","icon","faReact","size","pull","color","faSass","MintBeanLogo","faGithub","withRouter","linkPath","linkText","useLocation","pathname","toLowerCase","to","Timer","start","getTime","useState","time","setTime","useEffect","stopTimer","setInterval","t","clearInterval","Stats","moves","GameBoard","props","orderedTiles","nopeAudio","Audio","nopeSound","slideAudio","slideSound","shuffleTiles","tiles","width","i","length","j","Math","floor","random","k","forEach","sTile","index","col","row","shuffledIndex","isSolvable","hiddenRow","filter","tile","hidden","inversions","createTiles","boardWidth","boardHeight","tileIndex","piece","push","shuffledTiles","map","oTile","correctArray","currentTile","setState","correctTiles","moveTile","state","item","shake","hiddenTile","movable","play","updatedTiles","slice","moveCounter","includes","gameIsOver","gameOver","setTimeout","handleGameOver","stopShake","shuffledCopy","this","imgUrl","style","visibility","opacity","zIndex","height","tileLength","Component","GameImage","toggleStart","backgroundImage","onClick","GameOver","toggleGameOver","timer","hours","minutes","seconds","GamePiece","shakeTile","setShake","correctCol","correctRow","tileSize","position","transform","imgPlacement","background","Slide","setMoves","setStart","setGameOver","setTimer","setImage","grid","setGrid","images","pickImage","gridHeight","gridWidth","App","basename","process","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecfdce41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Mintbean = () => {\r\n    return (\r\n        <svg\r\n        className='mintbean'\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fillRule=\"evenodd\"\r\n        strokeLinejoin=\"round\"\r\n        strokeMiterlimit=\"2\"\r\n        clipRule=\"evenodd\"\r\n        viewBox=\"0 0 23 30\"\r\n      >\r\n        <path fill=\"none\" d=\"M0 0H22.685V29.167H0z\"></path>\r\n        <path\r\n          fill=\"url(#_Linear1)\"\r\n          d=\"M7.619 27.666c-.3-.299-.48-.712-.461-1.279.096-2.681 1.367-8.455 1.919-11.034.72-3.358 2.159-6.956 4.078-11.273.357-.804.863-2.285 2.398-2.159.159.013.319.031.487.052 4.337 1.741 6.896 6.9 5.99 13.38-1.204 8.614-7.618 12.432-12.473 12.473a9.955 9.955 0 01-1.938-.16zm-2.886-1.281c-1.7-1.338-2.811-3.594-3.811-6.714-2.056-6.408 3.231-17.248 10.314-18.23.652-.09 1.288-.119 1.9-.09.141.683-.79 2.015-1.42 3.208-1.154 2.184-3.394 7.322-4.318 11.754-.928 4.456-1.408 7.334-1.919 9.354-.149.591-.386.778-.746.718z\"\r\n        ></path>\r\n        <defs>\r\n          <linearGradient\r\n            id=\"_Linear1\"\r\n            x1=\"0\"\r\n            x2=\"1\"\r\n            y1=\"0\"\r\n            y2=\"0\"\r\n            gradientTransform=\"matrix(14 -25.8265 31.4678 17.0581 4 27.826)\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n          >\r\n            <stop offset=\"0\" stopColor=\"#16A4DA\"></stop>\r\n            <stop offset=\"0.15\" stopColor=\"#00ABD7\"></stop>\r\n            <stop offset=\"0.34\" stopColor=\"#00C6CD\"></stop>\r\n            <stop offset=\"0.5\" stopColor=\"#00DAC5\"></stop>\r\n            <stop offset=\"0.8\" stopColor=\"#00FFB7\"></stop>\r\n            <stop offset=\"1\" stopColor=\"#00FF9B\"></stop>\r\n          </linearGradient>\r\n        </defs>\r\n      </svg>\r\n    )\r\n}\r\n\r\nexport default Mintbean;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faReact, faSass, faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport MintBeanLogo from './MintBeanLogo';\r\n\r\nconst Landing = () => {\r\n\treturn (\r\n\t\t<div className=\"home\">\r\n\t\t\t<div className=\"explainer\">\r\n\t\t\t\t<p className='left'>Do the Slide is a puzzle game built in the style of slide-15 puzzles. The puzzle will randomly select an image, divide it up into tiles, and scramble those tiles on the board.  </p>\r\n\t\t\t\t\r\n\t\t\t\t<p className='right'>Your job, as the player, is to rearrange the tiles back into the original image. Click on a tile to move it - but you can only move tiles that are adjacent to the empty slot. See if you can do it in fewer than 200 moves!</p>\r\n\t\t\t\t<img className='center' src='./images/demo.gif' alt='animated screencap of game'/>\r\n\t\t\t\r\n\t\t\t\t<p className='left'>This app was built by <a href='https://dinamuhic.com' target='_blank' rel='noreferrer'> Dina Muhic</a>,\r\n\t\t\t\t\t<br />using React and Sass,\r\n\t\t\t\t\t<br />as part of a <a href='https://mintbean.io/' target='_blank' rel='noreferrer'>MintBean</a> learnathon project.\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<FontAwesomeIcon icon={faReact} size='2x' pull='left' color='#440e90' className='fa-icon'/> \r\n\t\t\t\t\t<FontAwesomeIcon icon={faSass} size='2x' color='#ffb2d5' className='fa-icon'/>\r\n\t\t\t\t\t<MintBeanLogo />\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className='right'>\r\n\t\t\t\t<p >You can view the source code <a href='https://github.com/dinaporia/do-the-slide' target='_blank' rel='noreferrer'>here</a>.</p>\r\n\t\t\t\t<FontAwesomeIcon icon={faGithub} size='2x' className='fa-icon github'/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport { withRouter, NavLink, useLocation } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    const location = useLocation();\r\n    let linkPath = '/slide';\r\n    let linkText = 'Play Game';\r\n    if (location.pathname.toLowerCase() === '/slide') {\r\n        linkPath = '/home';\r\n        linkText = 'Home';\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <header className=\"app-title\">\r\n            Do the Slide\r\n            </header>\r\n            <NavLink to={linkPath}>{linkText}</NavLink>\r\n        </div>\r\n    );\r\n}   \r\n\r\nexport default withRouter(Header);","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst Timer = ({start, getTime}) => {\r\n    const [ time, setTime ] = useState(0);\r\n    useEffect(() => {\r\n        if (start) {\r\n            const stopTimer = setInterval(() => setTime(t => t + 1), 1000);\r\n            return () => clearInterval(stopTimer);\r\n         } else {\r\n            getTime(time);\r\n        }\r\n    }, [start, time, getTime])\r\n\r\n    return (\r\n        <p>Time: <span id='time'>{time}</span></p>\r\n    );\r\n}\r\n\r\n\r\nconst Stats = ({moves, start = false, getTime}) => {\r\n\r\n    return (\r\n        <div className='stats'>\r\n            <p>Moves: <span id='moves'>{moves}</span></p>\r\n            <Timer start={start} getTime={getTime}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Stats;","export default __webpack_public_path__ + \"static/media/nopeSound.1d842c55.wav\";","export default __webpack_public_path__ + \"static/media/slideSound2.57fe2d4c.mp3\";","import React, { Component } from 'react';\r\nimport { GamePiece } from './';\r\nimport nopeSound from '../../assets/sounds/nopeSound.wav';\r\nimport slideSound from '../../assets/sounds/slideSound2.mp3';\r\n\r\nclass GameBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            correctTiles: [],  \r\n            shuffledTiles: [],\r\n            gameIsOver: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createTiles();\r\n    }\r\n\r\n    // store ordered tiles as props bc they don't change after creation\r\n    orderedTiles = [];\r\n\r\n    // to do: fix overlapping audio issue\r\n    nopeAudio = new Audio(nopeSound);\r\n    slideAudio = new Audio(slideSound);\r\n\r\n    // shuffle tiles using Fisher-Yates algorithm\r\n    shuffleTiles = (tiles, width) => {\r\n        for (let i = tiles.length -1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * i);\r\n            const k = tiles[i];\r\n            tiles[i] = tiles[j];\r\n            tiles[j] = k;\r\n        }\r\n        // store new location in each tile\r\n        tiles.forEach((sTile, index) => {\r\n            sTile.col = index % width;\r\n            sTile.row = Math.floor(index/width);\r\n            sTile.shuffledIndex = index; // store for easier reference\r\n        }); \r\n    }\r\n\r\n    // check to see if puzzle is solvable using inversions\r\n    isSolvable = (width, tiles) => {\r\n        const hiddenRow = tiles.filter(tile => tile.hidden)[0].row;\r\n        let inversions = 0;\r\n        // check for 0 bc it isn't even or odd\r\n        tiles.forEach( tile => {\r\n        // don't count hidden tile\r\n            if (tile.hidden) return;\r\n        // each tile that belongs before this one but comes after it is an inversion\r\n            for (let i = (tile.shuffledIndex + 1); i < tiles.length; i++) {\r\n                if (!tiles[i].hidden && (tiles[i].id < tile.id)) {\r\n                    inversions++;\r\n                }\r\n            }\r\n        });\r\n\r\n        // if grid is odd, inversions must be even\r\n        if (width % 2 === 1) {\r\n            return (inversions % 2 === 0);\r\n        } else {\r\n            const rowIsEven = (hiddenRow === 0 || hiddenRow % 2 === 0) \r\n            ? true : false;\r\n            // if hidden row is even, inversions must be odd\r\n            if (rowIsEven) {\r\n                return (inversions % 2 === 1)\r\n            } else {\r\n                // if hidden row is odd, inversions must be even\r\n                return (inversions % 2 === 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    // runs on mount\r\n    createTiles = () => {\r\n        const { boardWidth, boardHeight } = this.props;\r\n        let tileIndex = 0;\r\n        // each tile stores its correct location in array (via index/id) and col/row\r\n        for (let row = 0; row < boardHeight; row++) {\r\n            for (let col = 0; col < boardWidth; col++) {\r\n                const piece = { id: tileIndex, col: col, row: row }\r\n                this.orderedTiles.push(piece);\r\n                tileIndex++;\r\n                 // hide corner tile\r\n                piece.hidden = ((piece.row === (boardHeight - 1)) && (piece.col === (boardWidth - 1))) ? true : false;\r\n            }\r\n        }\r\n        // create shallow copy of cloned objects to shuffle\r\n        let shuffledTiles = this.orderedTiles.map(oTile => {\r\n            return {...oTile}\r\n        });\r\n        \r\n        this.shuffleTiles(shuffledTiles, boardWidth);\r\n\r\n        // if puzzle isn't solvable, reshuffle\r\n        while (!this.isSolvable(boardWidth, shuffledTiles )) {\r\n            this.shuffleTiles(shuffledTiles, boardWidth);\r\n        }\r\n       \r\n        // note whether tiles are in correct position\r\n        // hidden tile always reads true\r\n        const correctArray = this.orderedTiles.map(oTile => {\r\n            const currentTile = shuffledTiles.filter(sTile => sTile.id === oTile.id)[0];\r\n            return (currentTile.hidden \r\n                || (currentTile.row === oTile.row && currentTile.col === oTile.col)) \r\n                ? true \r\n                : false;\r\n        });\r\n\r\n        this.setState({ correctTiles: correctArray, shuffledTiles: shuffledTiles });\r\n    }\r\n\r\n    // passed to GamePieces, responds to click\r\n    moveTile = (id) => {\r\n        // use clones of state objects to prevent accidentally mutating state\r\n        const currentTile = {...this.state.shuffledTiles.filter(item => item.id === id)[0]};\r\n        // hidden tile cannot be interacted with\r\n        if (currentTile.hidden) return;     \r\n        currentTile.shake = false;  \r\n        \r\n        // check if tile is adjacent to hidden aka movable\r\n        const hiddenTile = {...this.state.shuffledTiles.filter(item => item.hidden)[0]};\r\n        let movable = false;\r\n\r\n        if (hiddenTile.row === currentTile.row) {\r\n            if (hiddenTile.col - currentTile.col === 1) {\r\n                movable = 'right';\r\n            } else if (hiddenTile.col - currentTile.col === -1) {\r\n                movable = 'left';\r\n            }\r\n        } else if (hiddenTile.col === currentTile.col) {\r\n            if (hiddenTile.row - currentTile.row === 1) {\r\n                movable = 'down';\r\n            } else if (hiddenTile.row - currentTile.row === -1){\r\n                movable = 'up';\r\n            }\r\n        }\r\n        if (movable) this.slideAudio.play();\r\n        // set new position according to move direction\r\n        switch (movable) {\r\n            case 'left': \r\n                currentTile.col -= 1;\r\n                hiddenTile.col += 1;\r\n            break;\r\n            case 'right':\r\n                currentTile.col += 1;\r\n                hiddenTile.col -= 1;\r\n            break;\r\n            case 'up':\r\n                currentTile.row -= 1;\r\n                hiddenTile.row += 1;\r\n            break;\r\n            case 'down':\r\n                currentTile.row += 1;\r\n                hiddenTile.row -= 1;\r\n            break;\r\n            default:\r\n                currentTile.shake = true;\r\n                this.nopeAudio.play();\r\n        }   \r\n\r\n        // update location for moved & hidden tiles\r\n        const updatedTiles = this.state.shuffledTiles.slice();\r\n        updatedTiles[currentTile.shuffledIndex] = currentTile;\r\n        updatedTiles[hiddenTile.shuffledIndex] = hiddenTile;\r\n  \r\n        this.setState({shuffledTiles: updatedTiles })\r\n\r\n        this.props.moveCounter(); // increment move counter\r\n\r\n        // note if piece is in correct position, update state\r\n        const oTile = this.orderedTiles.filter(oTile => currentTile.id === oTile.id)[0];\r\n        const correctArray = this.state.correctTiles.slice();\r\n        correctArray[currentTile.id] = (currentTile.row === oTile.row \r\n            && currentTile.col === oTile.col) \r\n            ? true \r\n            : false;\r\n        \r\n        this.setState({correctTiles: correctArray});\r\n\r\n        // if all pieces are in correct position, game is won\r\n        if (!correctArray.includes(false)) {\r\n            this.setState({gameIsOver: true})\r\n            this.gameOver();\r\n        }\r\n    }\r\n\r\n    gameOver = () => {\r\n        setTimeout(() => this.props.handleGameOver(), 5000)\r\n        ;\r\n    }\r\n\r\n    // give tiles access to turn off their shake \r\n    stopShake = (shuffledIndex) => {\r\n        const shuffledCopy = this.state.shuffledTiles.slice();\r\n        shuffledCopy[shuffledIndex].shake = false;\r\n        this.setState({shuffledTiles: shuffledCopy});\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className='board' >\r\n            <img src={this.props.imgUrl} alt='solved!' className='overlay-image' style={(this.state.gameIsOver) ? {visibility: 'visible', opacity: 1, zIndex: 1} : {}} />\r\n            { this.state.shuffledTiles.map(tile => (\r\n                <GamePiece \r\n                    tile={tile} \r\n                    key={tile.id} \r\n                    moveTile={this.moveTile} \r\n                    size = {{width: this.props.boardWidth, height: this.props.boardHeight}}\r\n                    imgUrl={this.props.imgUrl}\r\n                    tileLength={this.props.tileLength}\r\n                    stopShake={this.stopShake}\r\n                />\r\n                )) \r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from 'react';\r\n\r\nconst GameImage = ({toggleStart, imgUrl}) => {\r\n\r\n    return (\r\n        <div className='game-image' style={{backgroundImage: `url(${imgUrl})`}}>\r\n          <p>To start, select grid size: </p>\r\n            <div className='level-select'>\r\n                <button onClick={() => toggleStart(3)}>3 x 3</button>\r\n                <button onClick={() => toggleStart(4)}>4 x 4</button>\r\n                <button onClick={() => toggleStart(5)}>5 x 5</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameImage;","import React from 'react';\r\n\r\nconst GameOver = ({toggleGameOver, imgUrl, moves, timer}) => {\r\n    // format display of time elapsed\r\n    const hours = Math.floor(timer/3600);\r\n    const minutes = Math.floor((timer % 3600) / 60);\r\n    const seconds = timer - (hours * 3600) - (minutes * 60);\r\n    let time = '';\r\n    // need to add edge cases for 1 hour/minute/second\r\n    // and 0 in the middle\r\n    if (hours > 0) time += `${hours} hours, `;\r\n    if (minutes > 0) time += `${minutes} minutes, `;\r\n    time += `${seconds} seconds`;\r\n\r\n    return (\r\n        <div className='game-over' style={{backgroundImage: `url(${imgUrl})`}}>\r\n            <h3>\r\n            You did it!\r\n            </h3><p>\r\n            And it only took you {moves} moves and {time}.\r\n            </p>\r\n          \r\n           <button onClick={toggleGameOver}>PLAY AGAIN</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameOver;","import React, {useEffect, useState} from 'react';\r\n\r\nconst GamePiece = ({tile, moveTile, size, imgUrl, tileLength, stopShake}) => {\r\n    const {id, row, col, hidden, shuffledIndex, shake = false} = tile;\r\n    const [ shakeTile, setShake] = useState('');\r\n\r\n    useEffect(() => {\r\n        // add shake, clear after animation ends\r\n        if (shake) {\r\n            setShake('shakeTile');\r\n            setTimeout(() => {\r\n                setShake('');\r\n                stopShake(shuffledIndex);\r\n                }, \r\n            800);\r\n        }\r\n    }, [shake, stopShake, shuffledIndex]);\r\n\r\n    // determine slice of image that goes inside tile\r\n    const correctCol = id % size.width;\r\n    const correctRow = Math.floor(id/size.width);\r\n\r\n    const tileSize = {\r\n        width: (tileLength - 5) + 'px', \r\n        height: (tileLength - 5) \r\n    };\r\n\r\n    const position = { \r\n        transform: `translate(${col * tileLength}px, ${row * tileLength}px) `\r\n    };\r\n        \r\n    const imgPlacement = (hidden) \r\n        ? { visibility: 'hidden' } \r\n        : { background: `url(${imgUrl}) no-repeat ${-correctCol * tileLength}px ${-correctRow * tileLength}px ` };\r\n\r\n    return (\r\n        <div \r\n            className={`tile ${(hidden) ? 'hidden' : ''}`}\r\n            style={{...tileSize, ...position}}\r\n            onClick={() => moveTile(id)}\r\n        >\r\n            <div \r\n                className={`inner-tile ${shakeTile}`} \r\n                style={imgPlacement}\r\n            >  </div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GamePiece;","import React, { useState } from 'react';\r\n\r\nimport { GameBoard, GameImage, GameOver, Stats } from './Game/';\r\n\r\nconst Slide = () => {\r\n    const [ moves, setMoves ] = useState(0);\r\n    const [ start, setStart ] = useState(false);\r\n    const [ gameOver, setGameOver ] = useState(false);\r\n    const [ timer, setTimer ] = useState(0);\r\n    const [ imgUrl, setImage ] = useState(false);\r\n    const [ grid, setGrid ] = useState(4);\r\n\r\n    const images = ['./images/bubbleSquare.jpg', './images/bird.jpg', './images/eggs.jpg', './images/fruit.jpg', './images/pastel.jpg', './images/pigeons.jpg', './images/rose.jpg'];\r\n \r\n    // select image randomly from array\r\n    const pickImage = () => {\r\n        for (let i = images.length -1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * i);\r\n            const k = images[i];\r\n            images[i] = images[j];\r\n            images[j] = k;\r\n        }\r\n        setImage(images[0]);\r\n    }\r\n    \r\n    if (!imgUrl) {\r\n        pickImage();\r\n    }\r\n\r\n    // grid size\r\n    const gridHeight = grid;\r\n    const gridWidth = grid;\r\n    const tileLength = 400/grid;\r\n\r\n    // receives grid input from GameImage\r\n    // resets moves, starts game\r\n    const toggleStart = (grid) => {\r\n        setGrid(grid);\r\n        setMoves(0);\r\n        setGameOver(false);\r\n        setStart(true);\r\n    }\r\n\r\n    // triggered by play again btn on GameOver screen\r\n    // selects new image\r\n    const toggleGameOver = () => {\r\n        setGameOver(false);\r\n        pickImage();\r\n    }\r\n\r\n    // passed to GameBoard\r\n    const moveCounter = () => {\r\n        setMoves(moves => moves + 1);\r\n    }\r\n\r\n    // triggered when tiles are arranged correctly\r\n    // stops counter, triggers game over screen\r\n    const handleGameOver = () => {\r\n        setGameOver(true);\r\n        setStart(false);\r\n       \r\n    }\r\n    // stores time from timer at game over\r\n    const getTime = (time) => {\r\n       setTimer(time - 5);\r\n    }\r\n\r\n    // toggle screens based on state\r\n    return (\r\n        <div className='game-wrapper'>\r\n        {(gameOver) ? \r\n            <GameOver \r\n                toggleGameOver={toggleGameOver} \r\n                imgUrl={imgUrl}\r\n                moves={moves}\r\n                timer={timer}\r\n            />\r\n            : (start) ?\r\n                <GameBoard \r\n                    boardWidth={gridWidth} \r\n                    boardHeight={gridHeight} \r\n                    start={start} \r\n                    handleGameOver={handleGameOver}\r\n                    moveCounter={moveCounter}\r\n                    imgUrl={imgUrl}\r\n                    tileLength={tileLength}\r\n                    pickImage={pickImage}\r\n                /> \r\n                :  <GameImage \r\n                        toggleStart={toggleStart} \r\n                        imgUrl={imgUrl}\r\n                    />\r\n        }\r\n        {(start || gameOver) &&\r\n            <Stats \r\n                moves={moves} \r\n                start={start} \r\n                getTime={getTime} \r\n            />\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Slide;","import React from 'react';\nimport { Switch, Route, Redirect, BrowserRouter as Router } from 'react-router-dom';\nimport './App.scss';\nimport Landing from './components/Landing';\nimport Header from './components/Header';\nimport Slide from './components/Slide';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/home'>\n\t\t\t\t\t\t<Landing />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/slide'>\n\t\t\t\t\t\t<Slide />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Redirect to='/home' />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\t\t\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}